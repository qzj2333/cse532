1. Nicole Wang, Lin Li
2. CODE
SERVER:
int main(int argc, char* argv[])
{
	if(argc > 1)
	{
		cerr << "has command line arguments" << endl;
		return 1;
	}
	else
	{
		ACE_INET_Addr server(1025, ACE_LOCALHOST);
		ACE_SOCK_Stream stream;
		ACE_SOCK_Acceptor acceptor;

		int call = acceptor.open(server, 1);
		
		if (call >= 0) 	// call success
		{
			ACE_TCHAR address[INET6_ADDRSTRLEN];
			server.addr_to_string(address, sizeof(address));
			ACE_OS::printf("%s\n", address);
			int connect = acceptor.accept(stream);
			while(connect >= 0)
			{
				char msg[BUFSIZ];
				while(stream.recv(msg, sizeof(msg)) > 0)
				{
					cout << msg << endl;
				}
				stream.close();
				cout << "client.leave" << endl;
				connect = acceptor.accept(stream);
			}
		}
		else
		{
			cerr << "Fail to connect" << endl;
		}
	}
	return 0;
}

CLIENT:
int main(int argc, char* argv[])
{
	if(argc < 2)
	{
		cerr << "no command line arguments" << endl;
		return 1;
	}
	else
	{
		ACE_INET_Addr server(1025, ACE_LOCALHOST);
		ACE_SOCK_Stream stream;
		ACE_SOCK_Connector connector;

		int call = connector.connect(stream, server);
		
		if (call >= 0) 	// call success
		{
			for(int i = 1; i < argc; i++)
			{
				stream.send_n(argv[i], sizeof(argv[i]));
			}
			stream.close();
		}
		else
		{
			cerr << "Fail to connect server" << endl;
		}
		
		return 0;
	}
}

RESULT:
SERVER:
[l.wang@linuxlab009 ACESimpleServer]$ ./ACESimpleServer
127.0.0.1:1025
11
33
stream.close
sdlk
jsd
dkf
stream.close
./ACESim22
sdlk
dkf
stream.close
CLIENT:
[l.wang@linuxlab009 ACESimpleClient]$ ./ACESimpleClient 11 22 33
[l.wang@linuxlab009 ACESimpleClient]$ ./ACESimpleClient sdlk jsd dkf
[l.wang@linuxlab009 ACESimpleClient]$ ./ACESimpleClient !! ## @@

3. For the class that constructed, it has private data members:
	int size: which is the argc
	char** msg: which is the argv
	ACE_INET_Addr* server
	ACE_SOCK_Stream stream
	ACE_SOCK_Connector connector
   Constructor passes argc andd argv as parameters, and assign them to member variables size and msg. Then it starts server at local address with port 1025, and set up stream
   The handle_timeout function calls connect() function to set up connection, and send all variables in msg to server and close the stream once finish sending all elements in msg
   
4. 
For first part: in main function,
1). Add ACE_Thread_Timer_Queue_Adapter<ACE_Timer_Heap> timer
2). Add ACE_Time_Value intervalTime(3, 0)
3). Add ACE_Time_Value startTime = ACE_OS::gettimeofday();
4). Add intervalTime to startTime: startTime += intervalTime;
5). Construct an Event object as previous: Event e(argc, argv);
6). Let event send all arguments to server at every timeout point: e.handle_timeout(intervalTime);
7). Schedule the event and set the thread wait forever:
	timer.schedule(&e, 0, startTime, intervalTime);
	ACE_Thread_Manager::instance()->wait();

For second part: in main function,
1). Add ACE_Thread_Timer_Queue_Adapter<ACE_Timer_Heap> timer
2). Add ACE_Time_Value intervalTime(3, 0)
3). Add ACE_Time_Value delayTime (0,0);
4). Construct an Event object as previous: Event e(argc, argv);
5). Call Reactor's schedule_timer() and run_event_loop() function to schedult the event and run the reactor loop forever:
	ACE_Reactor::instance()->schedule_timer(&e, 0, delayTime, intervalTime);
	ACE_Reactor::instance()->run_event_loop();
	
5. Construct a Event class inherit from ACE_Event_Handler, which has 
   - private data member:
	 ACE_INET_Addr* server;
	 ACE_SOCK_Stream stream;
	 ACE_SOCK_Acceptor acceptor;
   - public constructor which:
	 starts server at local address with port 1025: server = new ACE_INET_Addr(1025, ACE_LOCALHOST);
	 open the accetor with INET_Addr object server: int call = acceptor.open(*server, 1);
	 prints out current address and port if accetor opened successfully
   - a public method handle_input() which: 
     let acceptor open to accept from the Event's stream: int connect = acceptor.accept(e.stream);
	 if got connected successfully:
		keep receiving and prints out the data from stream until connection broke, 
		then close the stream and return 0
	 otherwise: prints out error message and return 1
	 
   In the main function, 
1). construct an Event object e
2). call e.handle_input() in an infinite loop
   
6. Changes I made:
In Event class, add a public method:
virtual ACE_HANDLE get_handle() const
{
	return acceptor.get_handle();
};

In main function,
- Remove the infinite loop with calling Event's handle_input()
- Add: ACE_Reactor::instance()->register_handler(&e, ACE_Event_Handler::ACCEPT_MASK);
	   ACE_Reactor::instance()->run_reactor_event_loop();